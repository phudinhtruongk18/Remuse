# Python3 program to find the number of
# Ãaaaaubarrays with sum exactly equal to k.
from collections import defaultdict
 
# Function to find number of subarrays 
# with sum exactly equal to k.
def findSubarraySum(arr, n, Sum):
  
    # Dictionary to store number of subarrays
    # starting from index zero having 
    # particular value of sum.
    prevSum = defaultdict(lambda : 0)
   
    res = 0
   
    # Sum of elements so far.
    currsum = 0
   
    for i in range(0, n): 
   
        # Add current element to sum so far.
        currsum += arr[i]
   
        # If currsum is equal to desired sum,
        # then a new subarray is found. So
        # increase count of subarrays.
        if currsum == Sum: 
            res += 1        
   
        # currsum exceeds given sum by currsum  - sum.
        # Find number of subarrays having 
        # this sum and exclude those subarrays
        # from currsum by increasing count by 
        # same amount.
        if (currsum - Sum) in prevSum:
            res += prevSum[currsum - Sum]
           
   
        # Add currsum value to count of 
        # different values of sum.
        prevSum[currsum] += 1
      
    return res

def find_subarrays_with_sum_k(arr, k):
    subarrays = []
    sum_map = {0: [-1]}
    curr_sum = 0
    for i, num in enumerate(arr):
        curr_sum += num
        diff = curr_sum - k
        print("---------------------")
        print("idx", i)
        print("summap", sum_map)
        print("cur", curr_sum)
        print("diff", diff)
        print("subarrays", subarrays)
        if diff in sum_map:
            for j in sum_map[diff]:
                subarrays.append(arr[j+1:i+1])
        if curr_sum not in sum_map:
            sum_map[curr_sum] = []
        sum_map[curr_sum].append(i)
    return subarrays

def subarrays_with_sum(arr, k):
    sum_map = {0: [-1]}  # stores running sum and index where it occurred
    curr_sum = 0
    result = []
    for i, num in enumerate(arr):
        curr_sum += num
        if curr_sum - k in sum_map:
            result.extend([arr[j+1:i+1] for j in sum_map[curr_sum-k]])
        if curr_sum not in sum_map:
            sum_map[curr_sum] = []
        sum_map[curr_sum].append(i)
    return result

if __name__ == "__main__":
 
    arr =  [10, 2, -2, -20, 10] 
    # arr =  [10] 
    # print(arr[-1])
    Sum = -10
    n = len(arr)
    print(findSubarraySum(arr, n, Sum))
    # print(find_subarrays_with_sum_k(arr, Sum))
    # print(subarrays_with_sum(arr, Sum))
    # print(subarrays_with_sum([5, 1, 2, 7, 3, 4], 8))
     
# This code is contributed by Rituraj Jain
